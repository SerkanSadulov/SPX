@using WEB.ViewModels
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelper
@model CategoriesViewModel
@{
    ViewData["Title"] = "Categories";
    var profileUrl = Url.Action("Profile", "Home");
    var uploadUrl = Url.Action("UploadProfilePicture", "Users");
    var loginUrl = Url.Action("LogIn", "Home");
}
<link rel="stylesheet" href="~/css/Categories.css">
<style>

</style>

<div id="loading-spinner-container">
    <div id="loading-spinner" class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Зареждане...</span>
    </div>
</div>
<div class="container">
    <h1 class="text-center mb-5 display-4">Категории</h1>

    <div class="input-group mb-3">
        <input type="text" class="form-control" id="search-input" placeholder="Търсене на желана категория..." aria-label="Search categories" aria-describedby="search-addon">
    </div>

    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-4" id="categories-container" style="display: none;">
    </div>
</div>
<script>
    let allCategories = []; 

    async function fetchCategories() {
        let servicesURL = "@Model.ServicesEndpoint";
        try {
            const startTime = Date.now();
            const response = await fetch(servicesURL + "Categories", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            });
            if (!response.ok) {
                throw new Error("Failed to fetch categories");
            }
            allCategories = await response.json(); 
            displayCategories(allCategories); 

            const elapsedTime = Date.now() - startTime;
            if (elapsedTime < 700) {
                await new Promise((resolve) => setTimeout(resolve, 700 - elapsedTime));
            }
        } catch (error) {
            console.error("Error fetching categories", error);
        } finally {
            document.getElementById("loading-spinner-container").style.display = "none";
            document.getElementById("categories-container").style.display = "flex";
        }
    }

    function displayCategories(categories) {
        const container = document.getElementById("categories-container");
        container.innerHTML = "";
        categories.forEach((category) => {
            const colDiv = document.createElement("div");
            colDiv.classList.add("col");

            const cardDiv = document.createElement("div");
            cardDiv.classList.add("card", "shadow-lg", "rounded", "text-center", "bg-dark", "bg-gradient", "text-white", "mb-1");

            cardDiv.style.cursor = "pointer";
            cardDiv.addEventListener("click", () => {
                const url =
                    '@Url.Action("ServicesByCategory", "Services")' +
                    "?categoryID=" +
                    encodeURIComponent(category.categoryID) +
                    "&categoryName=" +
                    encodeURIComponent(category.categoryName);
                window.location.href = url;
            });

            const imgElement = document.createElement("img");
            const categoryNameForUrl = category.categoryName.replace(/\s+/g, "");
            imgElement.src = '@Url.Content("~/img/")' + categoryNameForUrl + ".png";
            imgElement.alt = category.categoryName;
            imgElement.classList.add("card-img-top");
            imgElement.style.objectFit = "cover";

            
            const cardBodyDiv = document.createElement("div");
            cardBodyDiv.classList.add("card-body");
            cardBodyDiv.classList.add("card-body-scale");

            const categoryNameDiv = document.createElement("h5");
            categoryNameDiv.classList.add("card-title");
            categoryNameDiv.innerText = category.categoryName;

            cardBodyDiv.appendChild(categoryNameDiv);
            cardDiv.appendChild(imgElement);
            cardDiv.appendChild(cardBodyDiv);
            colDiv.appendChild(cardDiv);
            container.appendChild(colDiv);
        });
    }


    function filterCategories() {
        const searchInput = document.getElementById("search-input").value.toLowerCase();
        const filteredCategories = allCategories.filter(category =>
            category.categoryName.toLowerCase().includes(searchInput)
        );
        displayCategories(filteredCategories);
    }

    document.addEventListener("DOMContentLoaded", function () {
        const loggedInData = getCookie("LoggedInData");
        document.getElementById("search-input").addEventListener("input", filterCategories);
        fetchCategories();
    });
</script>