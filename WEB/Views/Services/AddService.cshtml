@using WEB.ViewModels
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelper
@model ServicesViewModel
@{
    ViewData["Title"] = "Add Listing";
    var profileUrl = Url.Action("Profile", "Home");
    var uploadUrl = Url.Action("UploadProfilePicture", "Users");
    var loginUrl = Url.Action("LogIn", "Home");
}

<link rel="stylesheet" href="~/css/AddService.css">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>


<div class="container w-100 w-lg-75 shadow-lg p-3 bg-dark bg-gradient rounded mt-3 mb-3" style="background-color:#d1d4d7">
    <div class="card-body border-2 ">
        <h3 class="card-title text-center fs-8 fw-bold mb-4 mt-1 text-white">Добавяне на обява</h3>
        <form id="addServiceForm">
            <div class="row text-white">
                <div class="col-lg-7 col-md-12">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="serviceName" class="form-label fs-5 fw-bold">Име на обявата</label>
                                <input type="text" class="form-control border-2 custom-border-black" id="serviceName" placeholder="Въведете име" required>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="serviceCategory" class="form-label fs-5 fw-bold">Категория</label>
                                <select class="form-select border-2 custom-border-black" id="serviceCategory" required></select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="servicePrice" class="form-label fs-5 fw-bold">Цена в лева</label>
                                <input type="number" step="0.01" class="form-control border-2 custom-border-black" id="servicePrice" placeholder="Въведете цена" required>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="contactPhone" class="form-label fs-5 fw-bold">Телефон за връзка</label>
                                <input type="tel" class="form-control border-2 custom-border-black" id="contactPhone" placeholder="Въведете телефон за контакт" required>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="serviceLocation" class="form-label fs-5 fw-bold">Местоположение на обявата</label>
                                <input type="text" class="form-control border-2 custom-border-black" id="serviceLocation" placeholder="Въведете местоположение" required>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3 bg-white rounded-2">
                        <label for="serviceDescription" class="form-label fs-5 fw-bold text-dark p-1">Описание</label>
                        <div id="serviceDescription" class="border border-2 text-dark" style="height: 150px;"></div>
                    </div>
                    <div class="text-center">
                        <button type="submit" id="addService" class="btn btn-success"><i class="fa-solid fa-floppy-disk"></i> Добавяне</button>
                        <button type="button" class="btn btn-danger" onclick="window.location.href='/'"><i class="fa-solid fa-ban"></i> Отменяне</button>
                    </div>
                </div>

                <div class="col-lg-5 col-md-12 mt-2">
                    <div class="mb-3">
                        <div class="text-center">
                            <div class="custom-file d-inline-block">
                                <input type="file" class="custom-file-input" id="serviceImages" multiple accept="image/*">
                                <label class="custom-file-label btn btn-secondary btn-lg rounded-3 p-2" for="serviceImages">Качване на снимки<br /> <i class="fas fa-image"></i></label>
                            </div>
                        </div>
                        <div id="imagePreviewContainer" class="mt-3 d-flex flex-wrap"></div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>


<div class="toast-container" id="toastContainer"></div>

<script>

    let autocomplete;
    function initAutocomplete() {
        const input = document.getElementById("serviceLocation");
        if (input) {
            autocomplete = new google.maps.places.Autocomplete(input, { types: ["geocode"] });
        }
    }

    const loggedInData = getCookie("LoggedInData");
    document.addEventListener("DOMContentLoaded", function () {
        if (!loggedInData || loggedInData.length === 0) {
            window.location.href = "/Home/LogIn";
            return;
        }

        const userData = JSON.parse(loggedInData);
        let userID = userData.userId;

        async function fetchCategories() {
            let servicesURL = "@Model.ServicesEndpoint";
            try {
                const response = await fetch(servicesURL + "Categories", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });
                if (!response.ok) {
                    throw new Error("Failed to fetch categories");
                }
                const categories = await response.json();
                displayCategories(categories);
            } catch (error) {
                console.error("Error fetching categories", error);
                showToast("Грешка при намиране на категория", "danger");
            }
        }

        function displayCategories(categories) {
            const categorySelect = document.getElementById("serviceCategory");
            categorySelect.innerHTML = "";

            categories.forEach((category) => {
                const optionElement = document.createElement("option");
                optionElement.value = category.categoryID;
                optionElement.innerText = category.categoryName;
                categorySelect.appendChild(optionElement);
            });
        }

        let selectedImages = [];

        document.getElementById("serviceImages").addEventListener("change", function (event) {
            const files = event.target.files;
            const imagePreviewContainer = document.getElementById("imagePreviewContainer");

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                if (file.type.startsWith("image/")) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const uniqueName = `${file.name}-${Date.now()}`; 

                        const imgWrapper = document.createElement("div");
                        imgWrapper.className = "position-relative";
                        imgWrapper.dataset.filename = uniqueName; 

                        const img = document.createElement("img");
                        img.src = e.target.result;
                        img.className = "image-preview";

                        const removeBtn = document.createElement("span");
                        removeBtn.className = "remove-image";
                        removeBtn.innerHTML = "&times;";
                        removeBtn.onclick = function () {
                            imagePreviewContainer.removeChild(imgWrapper);
                            selectedImages = selectedImages.filter((image) => image.dataset.filename !== uniqueName);
                        };

                        imgWrapper.appendChild(img);
                        imgWrapper.appendChild(removeBtn);
                        imagePreviewContainer.appendChild(imgWrapper);

                        const uniqueFile = new File([file], uniqueName, { type: file.type });
                        selectedImages.push(uniqueFile);
                    };
                    reader.readAsDataURL(file);
                }
            }
        });

        const quill = new Quill ("#serviceDescription", {
            theme: "snow",
            modules: {
                toolbar: [
                    ["bold", "italic", "underline"],
                    [{ list: "ordered" }, { list: "bullet" }, { indent: "-1" }, { indent: "+1" }],
                ],
            },
        });

        document.getElementById("addService").addEventListener("click", async function (event) {
            event.preventDefault();

            const serviceName = document.getElementById("serviceName").value;
            const serviceCategoryID = document.getElementById("serviceCategory").value;
            const servicePrice = document.getElementById("servicePrice").value;
            const contactPhone = document.getElementById("contactPhone").value;
            const serviceDescription = quill.root.innerHTML;
            const serviceID = "@Guid.NewGuid()"; 
            const location = document.getElementById("serviceLocation").value;

            let uniqueFileNames = [];

            const files = document.getElementById("serviceImages").files;
            try {
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    const imageFormData = new FormData();

                    const uniqueFileName = `${Date.now()}-${file.name}`;
                    imageFormData.append("serviceImage", file, uniqueFileName);

                    const response = await fetch("UploadServiceImage", {
                        method: "POST",
                        body: imageFormData,
                    });

                    const data = await response.json();
                    if (data.filePath) {
                        uniqueFileNames.push(uniqueFileName); 
                    } else {
                        throw new Error("Failed to upload image: " + file.name);
                    }
                }

                const imageNamesString = uniqueFileNames.join(",");

                const serviceData = {
                    ServiceID: serviceID,
                    ProviderID: userID,
                    ServiceName: serviceName,
                    CategoryID: serviceCategoryID,
                    Price: servicePrice,
                    Description: serviceDescription,
                    ContactPhone: contactPhone,
                    CreatedOn: new Date().toISOString(),
                    Images: imageNamesString, 
                    Location: location
                };

                let servicesURL = "@Model.ServicesEndpoint";

                const response = await fetch(servicesURL + "Services", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(serviceData),
                });

                if (response.ok) {
                    showToast("Service added successfully!", "success");
                    setTimeout(2000);
                    let url = '@Url.Action("Profile", "Home")';
                    window.location.href = url;
                } else {
                    showToast("Грешка при добавяне на обявата", "danger");
                }
            } catch (error) {
                console.error("Error submitting form", error);
                showToast("Грешка при добавянето на изображения.", "danger");
            }
        });

        
        function showToast(message, type) {
            const toastContainer = document.getElementById("toastContainer");
            const toastElement = document.createElement("div");
            toastElement.className = `toast align-items-center text-bg-${type} border-0`;
            toastElement.setAttribute("role", "alert");
            toastElement.setAttribute("aria-live", "assertive");
            toastElement.setAttribute("aria-atomic", "true");

            toastElement.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;

            toastContainer.appendChild(toastElement);
            const bsToast = new bootstrap.Toast(toastElement);
            bsToast.show();

            toastElement.addEventListener("hidden.bs.toast", () => {
                toastElement.remove();
            });
        }

        fetchCategories();
    });
</script>

<script src="https://maps.googleapis.com/maps/api/js?yr0m-MTyxWuWL0&libraries=places&callback=initAutocomplete" async defer></script>